---
- name: Check whether Hashicorp binary already presents on the target system
  ansible.builtin.stat:
    path: "{{ packages_hashicorp_path }}/{{ item }}"
  register: _hashicorp_binary_stat
  loop: "{{ packages_hashicorp }}"

- name: Get installed Hashicorp application version
  ansible.builtin.command:
    cmd: "{{ packages_hashicorp_path }}/{{ item.item }} -version"
  register: _hashicorp_installed_version
  changed_when: false
  failed_when: false
  loop: "{{ _hashicorp_binary_stat.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Get a latest Hashicorp application release information
  ansible.builtin.uri:
    url: "{{ packages_hashicorp_release_api }}/{{ item.item }}/latest"
  register: _hashicorp_latest_release_data
  loop: "{{ _hashicorp_binary_stat.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Install the latest Hashicorp application
  ansible.builtin.unarchive:
    src: "{{ item[1][0] }}"
    dest: "{{ packages_hashicorp_path }}"
    remote_src: true
  become: true
  when: (not (item[0].item.stat.exists | bool)) or (packages_hashicorp_upgrade and item[2] not in item[0].stdout)
  loop: "{{ _hashicorp_installed_version.results | zip((_hashicorp_latest_release_data.results |
         community.general.json_query(_query_url)),(_hashicorp_latest_release_data.results |
         community.general.json_query(_query_ver))) }}"
  loop_control:
    label: "{{ item[0].item.item}}"
  vars:
    _query_url: "[*].json.builds[?arch==`{{ packages_arch }}` && os==`{{ packages_os }}`].url"
    _query_ver: "[*].json.version"
