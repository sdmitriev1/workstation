---
- name: Check whether Terraform binary already presents on the target system
  ansible.builtin.stat:
    path: "{{ packages_terraform_binary_path }}"
  register: _terraform_binary_stat

- name: Get installed Terraform version
  ansible.builtin.command:
    cmd: "{{ packages_terraform_binary_path }} -version"
  register: _terraform_installed_version
  changed_when: false
  when: packages_terraform_upgrade

- name: Get the latest Terraform version
  when: not _terraform_binary_stat.stat.exists or packages_terraform_upgrade
  block:
    - name: Get a latest Terraform release information
      ansible.builtin.uri:
        url: "{{ packages_terraform_hashicorp_latest_release_api }}"
      register: _terraform_latest_release_data

    - name: Define a latest Terraform version
      ansible.builtin.set_fact:
        _terraform_latest_version: "{{ _terraform_latest_release_data.json | community.general.json_query('current_version') }}"

- name: Install Terraform
  when: (not _terraform_binary_stat.stat.exists) or
        (packages_terraform_upgrade and _terraform_latest_version not in _terraform_installed_version.stdout)
  block:
    - name: Define a Terraform package name
      ansible.builtin.set_fact:
        _terraform_package: "{{ packages_terraform_package_name_prefix + _terraform_latest_version + packages_terraform_package_name_postfix }}"

    - name: Define a URL of the latest Terraform package
      ansible.builtin.set_fact:
        _terraform_latest_url: "{{ _terraform_latest_release_data.json | community.general.json_query('current_download_url') }}/{{ _terraform_package }}"

    - name: Install the latest Terraform
      ansible.builtin.unarchive:
        src: "{{ _terraform_latest_url }}"
        dest: "{{ packages_terraform_path }}"
        remote_src: true
      become: true
