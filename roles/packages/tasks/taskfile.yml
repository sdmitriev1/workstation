---
- name: Check whether Taskfile binary already presents on the target system
  ansible.builtin.stat:
    path: "{{ packages_taskfile_binary_path }}"
  register: _taskfile_binary_stat

- name: Get a latest Taskfile release information
  ansible.builtin.uri:
    url: "{{ packages_taskfile_github_latest_release_api }}"
  register: _taskfile_latest_release
  when: not _taskfile_binary_stat.stat.exists or packages_taskfile_upgrade

- name: Determine installed and the latest Taskfile versions
  when: packages_taskfile_upgrade
  block:
    - name: Get installed Taskfile version
      ansible.builtin.command:
        cmd: "{{ packages_taskfile_binary_path }} --version"
      register: _taskfile_installed_version
      changed_when: false
      failed_when: false

    - name: Define a latest Taskfile version
      ansible.builtin.set_fact:
        _taskfile_latest_version: "{{ _taskfile_latest_release.json | community.general.json_query('name') }}"

- name: Install Taskfile
  when: (not _taskfile_binary_stat.stat.exists) or
        (packages_taskfile_upgrade and _taskfile_latest_version not in _taskfile_installed_version.stdout)
  block:
    - name: Define a URL of the latest Taskfile package
      ansible.builtin.set_fact:
        _taskfile_latest_url: "{{ _taskfile_latest_release.json | community.general.json_query(_taskfile_latest_release_query) }}"
      vars:
        _taskfile_latest_release_query: "assets[?name==`{{ packages_taskfile_package_name }}`].browser_download_url"

    - name: Install the latest Taskfile on Debian systems
      ansible.builtin.apt:
        deb: "{{ _taskfile_latest_url[0] }}"
        lock_timeout: "{{ packages_lock_timeout }}"
      become: true
      when: ansible_os_family == "Debian"

    - name: Install the latest Taskfile on Red Hat systems
      ansible.builtin.dnf:
        name: "{{ _taskfile_latest_url[0] }}"
        lock_timeout: "{{ packages_lock_timeout }}"
        disable_gpg_check: true
      become: true
      when: ansible_os_family == "RedHat"
